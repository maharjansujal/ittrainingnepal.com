Getting Started
Installation
Hello, World!
Hello, Cargo!
Common Programming Concepts
expand_less
Variables 
Mutability
Data Types
Functions
Comments
Control Flow
Understanding Ownership
expand_less
What is Ownership?
References and Borrowing
The Slice Type
Using Structs to Structure Related Data
expand_less
Defining and Instantiating Structs
. An Example Program Using Structs
Method Syntax
Enums and Pattern Matching
expand_less
Defining an Enum
The match Control Flow Construct
Concise Control Flow with if let
Managing Growing Projects with Packages, Crates, and Modules
expand_less
Packages and Crates
Defining Modules to Control Scope and Privacy
Paths for Referring to an Item in the Module Tree
Bringing Paths Into Scope with the use Keyword
Separating Modules into Different Files
Common Collections
expand_less
Storing Lists of Values with Vectors
Storing UTF-8 Encoded Text with Strings 
Storing Keys with Associated Values in Hash Maps
Error Handling
expand_less
Unrecoverable Errors with panic!
Recoverable Errors with Result
To panic! or Not to panic!
Generic Types, Traits, and Lifetimes
expand_less
 Generic Data Types
Traits: Defining Shared Behavior
Validating References with Lifetimes
Writing Automated Tests
expand_less
How to Write Tests
Controlling How Tests Are Run
Test Organization
An I/O Project: Building a Command Line Program
expand_less
Accepting Command Line Arguments
Reading a File
Refactoring to Improve Modularity and Error Handling
Developing the Library's Functionality with Test Driven Development
Working with Environment Variables
Writing Error Messages to Standard Error Instead of Standard Output
Functional Language Features: Iterators and Closures
expand_less
Closures: Anonymous Functions that Capture Their Environment
Processing a Series of Items with Iterators
Improving Our I/O Project
Comparing Performance: Loops vs. Iterators
More about Cargo and Crates.io
expand_less
Customizing Builds with Release Profiles
Publishing a Crate to Crates.io
Cargo Workspaces
Installing Binaries from Crates.io with cargo install
Extending Cargo with Custom Commands
Smart Pointers
expand_less
Using Box to Point to Data on the Heap
Treating Smart Pointers Like Regular References with the Deref Trait
Running Code on Cleanup with the Drop Trait
Rc, the Reference Counted Smart Pointer
RefCell and the Interior Mutability Pattern
Reference Cycles Can Leak Memory
Fearless Concurrency
expand_less
Using Threads to Run Code Simultaneously
Using Message Passing to Transfer Data Between Threads
Shared-State Concurrency
Extensible Concurrency with the Sync and Send Traits
Object Oriented Programming Features of Rust
expand_less
Characteristics of Object-Oriented Languages
 Using Trait Objects That Allow for Values of Different Types
 Implementing an Object-Oriented Design Pattern
Patterns and Matching
expand_less
All the Places Patterns Can Be Used
Refutability: Whether a Pattern Might Fail to Match
Pattern Syntax
Advanced Features
expand_less
Unsafe Rust
Advanced Traits
Advanced Types
Advanced Functions and Closures
Macros
Final Project: Building a Multithreaded Web Server
expand_less
Building a Single-Threaded Web Server
Turning Our Single-Threaded Server into a Multithreaded Server
Graceful Shutdown and Cleanup